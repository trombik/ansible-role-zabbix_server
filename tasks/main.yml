---
# tasks file for ansible-role-zabbix_server

- name: "Include {{ ansible_os_family }}.yml"
  include_vars: "{{ ansible_os_family }}.yml"

- name: "Include install-{{ ansible_os_family }}.yml"
  include: "install-{{ ansible_os_family }}.yml"

- name: Create zabbix_server_socket_dir
  ansible.builtin.file:
    path: "{{ zabbix_server_socket_dir }}"
    owner: "{{ zabbix_server_user }}"
    group: "{{ zabbix_server_group }}"
    mode: '0755'
    state: directory

- name: Create zabbix_server_pid_dir
  ansible.builtin.file:
    path: "{{ zabbix_server_pid_dir }}"
    owner: "{{ zabbix_server_user }}"
    group: "{{ zabbix_server_group }}"
    mode: '0755'
    state: directory

- name: Create zabbix_server_log_dir
  ansible.builtin.file:
    path: "{{ zabbix_server_log_dir }}"
    owner: "{{ zabbix_server_user }}"
    group: "{{ zabbix_server_group }}"
    mode: '0755'
    state: directory

- name: Create zabbix_server_externalscripts_dir
  ansible.builtin.file:
    path: "{{ zabbix_server_externalscripts_dir }}"
    mode: '0755'
    state: directory

- name: Assert attributes in zabbix_server_externalscripts_files
  assert:
    that:
      - "'name' in item"
      - "'state' in item"
      - item['state'] == 'present' or item['state'] == 'absent'
  with_items: "{{ zabbix_server_externalscripts_files }}"

- name: Copy external scripts
  ansible.builtin.copy:
    attributes: "{{ item['attributes'] | default(omit) }}"
    backup: "{{ item['backup'] | default(omit) }}"
    checksum: "{{ item['checksum'] | default(omit) }}"
    content: "{{ item['content'] | default(omit) }}"
    decrypt: "{{ item['decrypt'] | default(omit) }}"

    # XXX path_join appeared in ansible version 2.10
    # dest: "{{ (zabbix_server_externalscripts_dir, item['name']) | path_join }}"
    dest: "{{ zabbix_server_externalscripts_dir }}/{{ item['name'] }}"
    directory_mode: "{{ item['directory_mode'] | default(omit) }}"
    follow: "{{ item['follow'] | default(omit) }}"
    force: "{{ item['force'] | default(omit) }}"
    group: "{{ item['group'] | default(zabbix_server_group) }}"
    local_follow: "{{ item['local_follow'] | default(omit) }}"
    mode: "{{ item['mode'] | default('0755') }}"
    owner: "{{ item['owner'] | default(zabbix_server_user) }}"
    remote_src: "{{ item['remote_src'] | default(omit) }}"
    selevel: "{{ item['selevel'] | default(omit) }}"
    serole: "{{ item['serole'] | default(omit) }}"
    setype: "{{ item['setype'] | default(omit) }}"
    seuser: "{{ item['seuser'] | default(omit) }}"
    src: "{{ item['src'] | default(omit) }}"
    unsafe_writes: "{{ item['unsafe_writes'] | default(omit) }}"
    validate: "{{ item['validate'] | default(omit) }}"
  with_items: "{{ zabbix_server_externalscripts_files }}"
  when:
    - item['state'] == 'present'

- name: Remove external scripts
  ansible.builtin.file:

    # XXX path_join appeared in ansible version 2.10
    # path: "{{ (zabbix_server_externalscripts_dir, item['name']) | path_join }}"
    path: "{{ zabbix_server_externalscripts_dir }}/{{ item['name'] }}"
    state: absent
  with_items: "{{ zabbix_server_externalscripts_files }}"
  when:
    - item['state'] == 'absent'

- name: See if the database exists (postgresql)
  community.postgresql.postgresql_query:
    db: "{{ zabbix_server_backend_database_name }}"
    login_user: "{{ zabbix_server_backend_database_user }}"
    login_host: "{{ zabbix_server_backend_database_host }}"
    login_password: "{{ zabbix_server_backend_database_password }}"
    query: SELECT 1
  when: zabbix_server_backend_database == 'postgresql'
  register: __zabbix_server_backend_database_exist
  changed_when: false
  failed_when: false

- name: "Include createdb_postgresql.yml if database does not exist"
  include_tasks: "createdb_postgresql.yml"
  when:
    - zabbix_server_backend_database == 'postgresql'
    - "'msg' in __zabbix_server_backend_database_exist"
    - __zabbix_server_backend_database_exist.msg is search("FATAL:\s+database .* does not exist")

- name: "Create {{ zabbix_server_conf_file }}"
  ansible.builtin.template:
    src: zabbix_server.conf.j2
    dest: "{{ zabbix_server_conf_file }}"
    mode: "0600"
  notify: Restart zabbix_server

- name: Start zabbix_server
  ansible.builtin.service:
    name: "{{ zabbix_server_service }}"
    state: started

- name: Manage zabbix groups
  community.zabbix.zabbix_usergroup:
    debug_mode: "{{ item['debug_mode'] | default(omit) }}"
    gui_access: "{{ item['gui_access'] | default(omit) }}"
    http_login_password: "{{ item['http_login_password'] | default(omit) }}"
    http_login_user: "{{ item['http_login_user'] | default(omit) }}"
    login_password: "{{ item['login_password'] | default(zabbix_server_api_login_password) }}"
    login_user: "{{ item['login_user'] | default(zabbix_server_api_login_user) }}"
    name: "{{ item['name'] }}"
    rights: "{{ item['rights'] | default(omit) }}"
    server_url: "{{ item['server_url'] | default(zabbix_server_api_server_url) }}"
    state: "{{ item['state'] | default(omit) }}"
    status: "{{ item['status'] | default(omit) }}"
    tag_filters: "{{ item['tag_filters'] | default(omit) }}"
    timeout: "{{ item['timeout'] | default(omit) }}"
    validate_certs: "{{ item['validate_certs'] | default(omit) }}"
  with_items: "{{ zabbix_server_usergroups }}"

- name: Manage zabbix users
  community.zabbix.zabbix_user:
    after_login_url: "{{ item['after_login_url'] | default(omit) }}"
    alias: "{{ item['alias'] }}"
    autologin: "{{ item['autologin'] | default(omit) }}"
    autologout: "{{ item['autologout'] | default(omit) }}"
    http_login_password: "{{ item['http_login_password'] | default(omit) }}"
    http_login_user: "{{ item['http_login_user'] | default(omit) }}"
    lang: "{{ item['lang'] | default(omit) }}"
    login_password: "{{ item['login_password'] | default(zabbix_server_api_login_password) }}"
    login_user: "{{ item['login_user'] | default(zabbix_server_api_login_user) }}"
    name: "{{ item['name'] | default(omit) }}"
    override_passwd: "{{ item['override_passwd'] | default(omit) }}"
    passwd: "{{ item['passwd'] | default(omit) }}"
    refresh: "{{ item['refresh'] | default(omit) }}"
    role_name: "{{ item['role_name'] | default(omit) }}"
    rows_per_page: "{{ item['rows_per_page'] | default(omit) }}"
    server_url: "{{ item['server_url'] | default(zabbix_server_api_server_url) }}"
    state: "{{ item['state'] | default(omit) }}"
    surname: "{{ item['surname'] | default(omit) }}"
    theme: "{{ item['theme'] | default(omit) }}"
    timeout: "{{ item['timeout'] | default(omit) }}"
    timezone: "{{ item['timezone'] | default(omit) }}"
    type: "{{ item['type'] | default(omit) }}"
    user_medias: "{{ item['user_medias'] | default(omit) }}"
    usrgrps: "{{ item['usrgrps'] | default(omit) }}"
    validate_certs: "{{ item['validate_certs'] | default(omit) }}"
  with_items: "{{ zabbix_server_users }}"

- name: Manage discovery rules
  community.zabbix.zabbix_discovery_rule:
    dchecks: "{{ item['dchecks'] | default(omit) }}"
    delay: "{{ item['delay'] | default(omit) }}"
    http_login_password: "{{ item['http_login_password'] | default(omit) }}"
    http_login_user: "{{ item['http_login_user'] | default(omit) }}"
    iprange: "{{ item['iprange'] | default(omit) }}"
    login_password: "{{ item['login_password'] | default(zabbix_server_api_login_password) }}"
    login_user: "{{ item['login_user'] | default(zabbix_server_api_login_user) }}"
    name: "{{ item['name'] }}"
    proxy: "{{ item['proxy'] | default(omit) }}"
    server_url: "{{ item['server_url'] | default(zabbix_server_api_server_url) }}"
    state: "{{ item['state'] | default(omit) }}"
    status: "{{ item['status'] | default(omit) }}"
    timeout: "{{ item['timeout'] | default(omit) }}"
    validate_certs: "{{ item['validate_certs'] | default(omit) }}"
  with_items: "{{ zabbix_server_discovery_rules }}"
